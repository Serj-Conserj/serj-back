import sys
import os
import asyncio
import uuid
import json
import time
from pathlib import Path
from contextlib import asynccontextmanager

from sqlalchemy import select
from database.models import (
    Place,
    AlternateName,
    MetroStation,
    Cuisine,
    Feature,
    VisitPurpose,
    OpeningHour,
    Photo,
    MenuLink,
    BookingLink,
    Review,
)
from database.database import engine, Base, AsyncSessionLocal
from api.utils.logger import logger
import requests


# ---------- LLM helper ----------------------------------------------------- #
def generate_llm_reply(prompt: list[dict]) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ Groq-LLM —Å –æ—Ç–ª–∞–¥–∫–æ–π –æ—à–∏–±–æ–∫."""
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {os.getenv('GROQ_TOKEN')}",
        "Content-Type": "application/json",
    }
    data = {
        "model": "llama3-70b-8192",
        "messages": prompt,
        "temperature": 0.7,
        "max_tokens": 1024,
        "top_p": 1,
        "stream": False,
    }
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        content = response.json()["choices"][0]["message"]["content"].strip()
        time.sleep(0.5)  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ LLM
        return content
    except requests.RequestException as e:
        logger.error(f"[ERROR] Request failed: {e}")
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏: {e}")
    except (KeyError, IndexError) as e:
        logger.error(f"[ERROR] Invalid response structure: {e}")
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏: {e}")


def normalize_place_name(full_name: str, address: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –∑–∞–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM."""
    prompt = [
        {
            "role": "user",
            "content": f"""

–¢—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–≤–µ–¥–µ–Ω–∏–π.

–ù–∞–∑–≤–∞–Ω–∏–µ: "{full_name}"
–ê–¥—Ä–µ—Å: "{address}"


–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ> (—É–ª. <–Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã>)
""".strip(),
        }
    ]
    return generate_llm_reply(prompt)


async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    logger.info("üì¶ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")


@asynccontextmanager
async def get_async_session():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞—ë—Ç —Å–µ—Å—Å–∏—é –±–µ–∑ –∞–≤—Ç–æ-commit.
    Rollback –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –æ—à–∏–±–∫–µ, commit ‚Äî –≤—Ä—É—á–Ω—É—é.
    """
    async with AsyncSessionLocal() as session:
        try:
            yield session
        except Exception as e:
            await session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
            raise
        finally:
            await session.close()


# ---------- –ò–º–ø–æ—Ä—Ç --------------------------------------------------------- #
BATCH_SIZE = 30  # —Å–∫–æ–ª—å–∫–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–¥–Ω–∏–º commit'–æ–º


async def import_from_json(filename: str) -> None:
    logger.info(f"üìÇ –ù–∞—á–∞—Ç –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞: {filename}")
    await create_tables()

    with open(filename, "r", encoding="utf-8") as f:
        data = json.load(f)

    added = 0
    skipped = 0

    async with get_async_session() as session:
        for place_data in data:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            dup_q = select(Place).where(
                Place.full_name == place_data["full_name"],
                Place.address == place_data["address"],
            )
            if (await session.execute(dup_q)).scalar():
                skipped += 1
                logger.info(f"‚Ü©Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç: {place_data['full_name']}")
                continue

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º ¬´–≥–ª–∞–≤–Ω—É—é¬ª —Å—Å—ã–ª–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bl = place_data.get("booking_links", {})

            has_main = (
                bool(bl.get("main"))
                if isinstance(bl, dict)
                else any(link.get("type") == "main" for link in bl)
            )

            place = Place(
                id=uuid.uuid4(),
                full_name=normalize_place_name(
                    place_data["full_name"], place_data["address"]
                ),
                phone=place_data["phone"],
                address=place_data["address"],
                type=place_data["type"],
                average_check=str(place_data.get("average_check")),
                description=place_data["description"],
                deposit_rules=place_data.get("deposit_rules"),
                coordinates_lat=place_data["coordinates"]["lat"],
                coordinates_lon=place_data["coordinates"]["lon"],
                source_url=place_data["source"]["url"],
                source_domain=place_data["source"]["domain"],
                search_text=(
                    place_data["full_name"]
                    + " "
                    + place_data["address"]
                    + " ".join(place_data.get("close_metro", ""))
                )
                .translate(
                    str.maketrans(
                        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
                        "–∞–±—Ü–¥–µ—Ñ–≥—Ö–∏–π–∫–ª–º–Ω–æ–ø–∫—Ä—Å—Ç—é–≤–≤—Ö—É–∑–ê–ë–¶–î–ï–§–ì–•–ò–ô–ö–õ–ú–ù–û–ü–ö–†–°–¢–Æ–í–í–•–£–ó",
                    )
                )
                .lower(),
                available_online=has_main,
            )

            session.add(place)  # place –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–µ—Å—Å–∏–∏ —Å—Ä–∞–∑—É

            # —Å–≤—è–∑–∏
            await process_relationships(session, place, place_data)

            added += 1

            # commit –∫–∞–∂–¥—ã–µ BATCH_SIZE –æ–±—ä–µ–∫—Ç–æ–≤
            if added % BATCH_SIZE == 0:
                await session.commit()
                logger.info(
                    f"üöÄ –î–æ–±–∞–≤–ª–µ–Ω –±–∞—Ç—á –∏–∑ {BATCH_SIZE} –∑–∞–≤–µ–¥–µ–Ω–∏–π (–≤—Å–µ–≥–æ: {added})"
                )
                await asyncio.sleep(10)

        # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π commit
        await session.commit()
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}")


async def process_relationships(session, place: Place, place_data: dict) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º *—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π* with session.no_autoflush, —á—Ç–æ–±—ã place —É—Å–ø–µ–ª –ø–æ–ø–∞—Å—Ç—å –≤ —Å–µ—Å—Å–∏—é.
    """
    with session.no_autoflush:  # <-- FIX here
        # alternate names
        for name in place_data["alternate_name"]:
            alt_name = (
                await session.execute(
                    select(AlternateName).where(AlternateName.name == name)
                )
            ).scalar()
            if not alt_name:
                alt_name = AlternateName(id=uuid.uuid4(), name=name)
                session.add(alt_name)
            place.alternate_names.append(alt_name)

        # metro
        for metro in place_data["close_metro"]:
            metro_obj = (
                await session.execute(
                    select(MetroStation).where(MetroStation.name == metro)
                )
            ).scalar()
            if not metro_obj:
                metro_obj = MetroStation(id=uuid.uuid4(), name=metro)
                session.add(metro_obj)
            place.metro_stations.append(metro_obj)

        # cuisine
        for cuisine in place_data["main_cuisine"]:
            cuisine_obj = (
                await session.execute(select(Cuisine).where(Cuisine.name == cuisine))
            ).scalar()
            if not cuisine_obj:
                cuisine_obj = Cuisine(id=uuid.uuid4(), name=cuisine)
                session.add(cuisine_obj)
            place.cuisines.append(cuisine_obj)

        # features
        for feature in place_data["features"]:
            feature_obj = (
                await session.execute(select(Feature).where(Feature.name == feature))
            ).scalar()
            if not feature_obj:
                feature_obj = Feature(id=uuid.uuid4(), name=feature)
                session.add(feature_obj)
            place.features.append(feature_obj)

        # purposes
        for purpose in place_data["visit_purposes"]:
            purpose_obj = (
                await session.execute(
                    select(VisitPurpose).where(VisitPurpose.name == purpose)
                )
            ).scalar()
            if not purpose_obj:
                purpose_obj = VisitPurpose(id=uuid.uuid4(), name=purpose)
                session.add(purpose_obj)
            place.visit_purposes.append(purpose_obj)

        # opening hours
        for day, hours in place_data["opening_hours"].items():
            place.opening_hours.append(
                OpeningHour(id=uuid.uuid4(), day=day, hours=hours)
            )

        # photos
        for photo_type, urls in place_data["photos"].items():
            for url in urls:
                place.photos.append(Photo(id=uuid.uuid4(), type=photo_type, url=url))

        # menu links
        for link_type, url in place_data["menu_links"].items():
            place.menu_links.append(MenuLink(id=uuid.uuid4(), type=link_type, url=url))

        # booking links
        for link_type, url in place_data["booking_links"].items():
            place.booking_links.append(
                BookingLink(id=uuid.uuid4(), type=link_type, url=url)
            )

        # reviews
        for r in place_data["reviews"]:
            place.reviews.append(
                Review(
                    id=uuid.uuid4(),
                    author=r["author"],
                    date=r["date"],
                    rating=r["rating"],
                    text=r["text"],
                    source=r.get("source"),
                )
            )


# ---------- –ó–∞–ø—É—Å–∫ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç–∞ -------------------------------------------- #
if __name__ == "__main__":
    asyncio.run(import_from_json("database/restaurants.json"))
